"""
Django settings for new_ssl_cert project.

Generated by 'django-admin startproject' using Django 2.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/2.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.2/ref/settings/
"""

import os

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 't$xexx$shb*)a7^)5k9&@(n2si2n@%h#_rfrfr1ai!$-=tkvsd'

# SECURITY WARNING: don't run with debug turned on in production!
# DEBUG = True
DEBUG = False if os.environ.get("DJANGO_DEBUG") == "False" else True

ALLOWED_HOSTS = ['*']

import sys

sys.path.insert(0, os.path.join(BASE_DIR, "apps"))

# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ssl_cert',
    'users',
    'captcha',
    'django_crontab',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'new_ssl_cert.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')]
        ,
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'new_ssl_cert.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.2/ref/settings/#databases

DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': os.path.join(BASE_DIR, 'db.sqlite3'),
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get("DB_NAME", "ssl_cert"),
        'USER': os.environ.get("DB_USER", "root"),
        'PASSWORD': os.environ.get("DB_PASSWORD", "ssl_cert"),
        'HOST': os.environ.get("DB_HOST", "127.0.0.1"),
        'PORT': os.environ.get("DB_PORT", 3306),
        "OPTIONS": {
            "charset": "utf8mb4",
        },
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.2/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'zh-hans'

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.2/howto/static-files/

STATIC_URL = '/static/'
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static'),
)
STATIC_ROOT = os.path.join(BASE_DIR, 'collect_static')

# 让 Django 用户认证系统使用我们自定义的用户模型
AUTH_USER_MODEL = 'users.User'

# 管理员邮箱
ADMINS = (
    ('admin', os.environ.get("EMAIL_HOST_USER", "zhenfeng.zhao@gaea.com")),
)

# 非空链接，却发生404错误，发送通知MANAGERS
SEND_BROKEN_LINK_EMAILS = True
MANAGERS = ADMINS

# 发送邮件
EMAIL_USE_SSL = True if os.environ.get("EMAIL_SSL", "True") == "True" else False
EMAIL_HOST = os.environ.get("EMAIL_HOST", "smtp.exmail.qq.com")
EMAIL_PORT = os.environ.get("EMAIL_PORT", 465)
EMAIL_HOST_USER = os.environ.get("EMAIL_HOST_USER", "zhenfeng.zhao@gaea.com")
EMAIL_HOST_PASSWORD = os.environ.get("EMAIL_PASSWORD", "awaiT321")
DEFAULT_FROM_EMAIL = EMAIL_HOST_USER

# 有错误时，django自动发送报警邮件的发件邮箱
# SERVER_EMAIL = ""

# 关闭浏览器时，自动退出登陆
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# 定时任务
CRONJOBS = [
    ('0 11 * * *', 'crontab.crontab.auto_update_ssl_cert'),
    ('30 10 * * *', 'crontab.crontab.expired_alarms'),
]

# 让authenticate不检查用户是否is_active，手动在代码里进行检查
AUTHENTICATION_BACKENDS = ['django.contrib.auth.backends.AllowAllUsersModelBackend']

# 登陆跳转地址
LOGIN_URL = "/users/login/"

# logging日志配置
LOGGING = {
    'version': 1,
    'disable_existing_loggers': True,
    'formatters': {  # 日志格式
        'standard': {
            # 'format': '%(asctime)s [%(threadName)s:%(thread)d] [%(name)s:%(lineno)d] [%(module)s:%(funcName)s] [%(levelname)s]- %(message)s'}
            'format': '%(asctime)s [%(name)s] [%(module)s:%(funcName)s:%(lineno)d] [%(levelname)s] - %(message)s'}
    },
    'filters': {  # 过滤器
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        }
    },
    'handlers': {  # 处理器
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
        'mail_admins': {  # 发送邮件通知管理员
            'level': 'ERROR',
            'class': 'django.utils.log.AdminEmailHandler',
            'filters': ['require_debug_false'],  # 仅当 DEBUG = False 时才发送邮件
            'include_html': True,
        },
        'info': {  # 记录到日志文件(需要创建对应的目录，否则会出错)
            'level': 'INFO',
            'class': 'logging.handlers.RotatingFileHandler',
            'filename': os.path.join(BASE_DIR, "logs", 'info.log'),  # 日志输出文件
            'maxBytes': 1024 * 1024 * 5,  # 文件大小
            'backupCount': 5,  # 备份份数
            'formatter': 'standard',  # 使用哪种formatters日志格式
        },
        'console': {  # 输出到控制台
            'level': 'DEBUG',
            'class': 'logging.StreamHandler',
            'formatter': 'standard',
        },
    },
    'loggers': {  # logging管理器
        'django': {
            'handlers': ['console', 'info'],
            'level': 'INFO',
            'propagate': False
        },
        'django.request': {
            'handlers': ['info', 'mail_admins'],
            'level': 'INFO',
            'propagate': True,
        },
        # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}

# 验证码配置
CAPTCHA_IMAGE_SIZE = (100, 25)  # 设置生成验证码图片的长和宽，单位为像素
# CAPTCHA_OUTPUT_FORMAT = u'%(text_field)s %(image)s %(hidden_field)s'  # 设置输出的格式，该插件自动在模板中生成3个元素：一个验证码图片，一个验证码输入框、一个用于存放秘钥的隐藏输入框。可以在此根据需要调整其在模板中生成的先后顺序
CAPTCHA_FOREGROUND_COLOR = '#009688'  # 设置验证码图片前景色
CAPTCHA_BACKGROUND_COLOR = '#ffffff'  # 设置验证码图片背景色
# CAPTCHA_FONT_SIZE = '20'  # 设置验证码图片中字体大小
# CAPTCHA_FONT_PATH = 'fonts/Vera.ttf'  # 设置字体样式，支持TTF等文件格式
# CAPTCHA_LETTER_ROTATION = (-35, 35)  # 设置验证码中字母旋转的角度
CAPTCHA_NOISE_FUNCTIONS = (
    'captcha.helpers.noise_null',)  # 是否添加干扰点和干扰线，当值为'captcha.helpers.noise_null'时，表示不添加干扰
CAPTCHA_CHALLENGE_FUNCT = 'captcha.helpers.random_char_challenge'  # 设置验证码类型，其内置了三种验证码类型，还包括'captcha.helpers.math_challenge'（数字）和'captcha.helpers.word_challenge'（字典），除此之外，你还可以自己定义验证码生成函数
# CAPTCHA_TIMEOUT = '5'  # 设置验证码的有效时间，单位为分钟
# CAPTCHA_LENGTH = '4'  # 当验证码类型为字符型时，指定字母个数
